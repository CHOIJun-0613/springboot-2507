# ===============================================================
# 공통 설정 (Default Profile)
# 모든 프로필에 기본으로 적용되는 설정입니다.
# 특정 프로필에서 재정의하지 않는 한, 이 설정이 사용됩니다.
# ===============================================================
server:
  port: 8081 # 내장 웹 서버(Tomcat)가 사용할 포트 번호입니다.
  servlet:
    #context-path: /api # 애플리케이션의 기본 URL 경로(Context Path)를 설정합니다. (예: http://localhost:8081/api)
    encoding:
      charset: UTF-8   # 모든 HTTP 요청 및 응답의 기본 문자 인코딩을 UTF-8로 설정합니다.
      enabled: true    # 서블릿 인코딩 설정을 활성화합니다.
      force: true      # 요청과 응답에 항상 설정된 인코딩을 강제로 적용합니다.
  compression: # HTTP 응답 압축 설정
    enabled: true # 응답 본문을 GZIP으로 압축하여 네트워크 트래픽을 줄입니다.
    min-response-size: 2048 # 압축을 적용할 최소 응답 크기입니다. (단위: bytes)
    mime-types: application/json,text/html,text/xml,text/plain # 압축을 적용할 미디어 타입 목록입니다.

spring:
  application:
    name: demo # 애플리케이션의 이름을 지정합니다.
  jpa:
    # OSIV(Open Session In View) 패턴 설정입니다.
    # true로 설정하면 영속성 컨텍스트가 뷰 렌더링 시점까지 살아있어 지연 로딩(Lazy Loading)이 가능하지만,
    # 커넥션을 너무 오래 점유하여 성능 저하의 원인이 될 수 있습니다. false를 권장합니다.
    open-in-view: false

# --- 로깅 설정 ---
logging:
  level:
    root: INFO # 전체 로깅 레벨의 기본값입니다.
    '[org.springframework.web]': INFO # Spring Web MVC 관련 로그 레벨을 설정합니다.
    '[com.example.demo]': DEBUG # 개발 중인 애플리케이션 패키지의 로그 레벨을 DEBUG로 설정하여 상세한 로그를 확인합니다.

---
# ===============================================================
# 개발(development) 프로필
# 활성화 방법: 애플리케이션 실행 시 --spring.profiles.active=dev 옵션을 추가합니다.
# 주로 개발 단계에서 사용하며, 인메모리 DB를 사용하여 빠르게 테스트하는 데 유용합니다.
# ===============================================================
spring:
  config:
    activate:
      on-profile: "dev" # "dev" 프로필이 활성화될 때 아래 설정을 적용합니다.

  # --- 개발용 인메모리 H2 데이터베이스 설정 ---
  datasource:
    driver-class-name: org.h2.Driver # H2 데이터베이스 드라이버 클래스입니다.
    # jdbc:h2:mem:testdb -> 애플리케이션이 실행되는 동안 메모리에서만 유지되는 데이터베이스를 생성합니다.
    # DB_CLOSE_DELAY=-1 -> 마지막 커넥션이 닫혀도 데이터베이스를 유지합니다.
    # DB_CLOSE_ON_EXIT=FALSE -> JVM이 종료될 때 데이터베이스를 닫지 않습니다. (메모리 DB에서는 생략 가능)
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa # H2 데이터베이스 접속 계정입니다.
    password: # H2 데이터베이스 접속 비밀번호입니다. (기본값: 없음)

  # --- H2 Console 활성화 ---
  h2:
    console:
      enabled: true # 개발 편의를 위해 H2 데이터베이스 웹 콘솔을 활성화합니다.
      path: /h2-console # H2 콘솔에 접근할 경로입니다. (http://localhost:8081/h2-console)

  # --- 개발용 JPA 및 Hibernate 설정 ---
  jpa:
    show-sql: true # 실행되는 모든 JPA(Hibernate) SQL 쿼리를 콘솔에 출력합니다.
    hibernate:
      # ddl-auto: [create | create-drop | update | validate | none]
      # create-drop: 애플리케이션 시작 시 스키마를 새로 생성하고, 종료 시 삭제합니다. 개발용으로 적합합니다.
      ddl-auto: create-drop
    properties:
      hibernate:
        format_sql: true # 콘솔에 출력되는 SQL 쿼리를 보기 좋게 정렬합니다.

---
# ===============================================================
# 로컬(local) 프로필 - 로컬 PC에 설치된 DB 사용 시
# 활성화 방법: 애플리케이션 실행 시 --spring.profiles.active=local 옵션을 추가합니다.
# 개발자 PC에 직접 설치된 MySQL, PostgreSQL 등의 데이터베이스를 사용할 때 유용합니다.
# ===============================================================
spring:
  config:
    activate:
      on-profile: "local" # "local" 프로필이 활성화될 때 아래 설정을 적용합니다.

  # --- 로컬 MySQL 데이터베이스 설정 예시 ---
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver # MySQL 데이터베이스 드라이버 클래스입니다.
    url: jdbc:mysql://localhost:3306/mydatabase?useSSL=false&serverTimezone=Asia/Seoul # 로컬 MySQL 서버 접속 주소입니다.
    username: root # 로컬 MySQL 접속 계정입니다.
    password: local_password # 로컬 MySQL 접속 비밀번호입니다.

  # --- 로컬용 JPA 및 Hibernate 설정 ---
  jpa:
    hibernate:
      # update: 애플리케이션 시작 시 엔티티와 테이블 간의 차이를 비교하여 변경된 부분만 반영합니다.
      # 주의: 기존 데이터가 손실될 수 있으므로 운영 환경에서는 사용하지 않는 것이 좋습니다.
      ddl-auto: update
    show-sql: true # 실행되는 SQL 쿼리를 콘솔에 출력합니다.
    properties:
      hibernate:
        format_sql: true # SQL 쿼리를 보기 좋게 정렬합니다.